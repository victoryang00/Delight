#![feature(test)]
extern crate test;
extern crate delight_book;

use delight_book::chapter7::*;
use std::borrow::BorrowMut;

#[bench]
fn bench_transpose8(b: &mut test::Bencher) {
    let mut test = [[0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char], [0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char],
        [0x80 as char, 0x40 as char, 0x20 as char, 0x10 as char, 0x08 as char, 0x04 as char, 0x02 as char, 0x01 as char], [0x80 as char, 0x40 as char, 0x20 as char, 0x10 as char, 0x08 as char, 0x04 as char, 0x02 as char, 0x01 as char],
        [0x00 as char, 0x00 as char, 0x00 as char, 0x01 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char], [0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x10 as char],
        [0x00 as char, 0x00 as char, 0x00 as char, 0x02 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char], [0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x10 as char, 0x00 as char],
        [0x00 as char, 0x00 as char, 0x00 as char, 0x04 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char], [0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x10 as char, 0x00 as char, 0x00 as char],
        [0x00 as char, 0x00 as char, 0x00 as char, 0x08 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char], [0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x10 as char, 0x00 as char, 0x00 as char, 0x00 as char],
        [0x55 as char, 0x55 as char, 0x55 as char, 0x55 as char, 0x55 as char, 0x55 as char, 0x55 as char, 0x55 as char], [0x00 as char, 0xFF as char, 0x00 as char, 0xFF as char, 0x00 as char, 0xFF as char, 0x00 as char, 0xFF as char],
        [0xAA as char, 0xAA as char, 0xAA as char, 0xAA as char, 0xAA as char, 0xAA as char, 0xAA as char, 0xAA as char], [0xFF as char, 0x00 as char, 0xFF as char, 0x00 as char, 0xFF as char, 0x00 as char, 0xFF as char, 0x00 as char],
        [0x7F as char, 0x3F as char, 0x1F as char, 0x0F as char, 0x07 as char, 0x03 as char, 0x01 as char, 0x00 as char], [0x00 as char, 0x80 as char, 0xC0 as char, 0xE0 as char, 0xF0 as char, 0xF8 as char, 0xFC as char, 0xFE as char],
        [0xFF as char, 0xFF as char, 0xFF as char, 0xFF as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char], [0xF0 as char, 0xF0 as char, 0xF0 as char, 0xF0 as char, 0xF0 as char, 0xF0 as char, 0xF0 as char, 0xF0 as char],
        [0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0xFF as char, 0xFF as char, 0xFF as char, 0xFF as char], [0x0F as char, 0x0F as char, 0x0F as char, 0x0F as char, 0x0F as char, 0x0F as char, 0x0F as char, 0x0F as char],
        [0xFF as char, 0xFF as char, 0xFF as char, 0xFF as char, 0xFF as char, 0xFF as char, 0xFF as char, 0xFF as char], [0xFF as char, 0xFF as char, 0xFF as char, 0xFF as char, 0xFF as char, 0xFF as char, 0xFF as char, 0xFF as char], ];
    let mut test1 = [[0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char], [0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char],
        [0x80 as char, 0x40 as char, 0x20 as char, 0x10 as char, 0x08 as char, 0x04 as char, 0x02 as char, 0x01 as char], [0x80 as char, 0x40 as char, 0x20 as char, 0x10 as char, 0x08 as char, 0x04 as char, 0x02 as char, 0x01 as char],
        [0x00 as char, 0x00 as char, 0x00 as char, 0x01 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char], [0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x10 as char],
        [0x00 as char, 0x00 as char, 0x00 as char, 0x02 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char], [0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x10 as char, 0x00 as char],
        [0x00 as char, 0x00 as char, 0x00 as char, 0x04 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char], [0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x10 as char, 0x00 as char, 0x00 as char],
        [0x00 as char, 0x00 as char, 0x00 as char, 0x08 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char], [0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x10 as char, 0x00 as char, 0x00 as char, 0x00 as char],
        [0x55 as char, 0x55 as char, 0x55 as char, 0x55 as char, 0x55 as char, 0x55 as char, 0x55 as char, 0x55 as char], [0x00 as char, 0xFF as char, 0x00 as char, 0xFF as char, 0x00 as char, 0xFF as char, 0x00 as char, 0xFF as char],
        [0xAA as char, 0xAA as char, 0xAA as char, 0xAA as char, 0xAA as char, 0xAA as char, 0xAA as char, 0xAA as char], [0xFF as char, 0x00 as char, 0xFF as char, 0x00 as char, 0xFF as char, 0x00 as char, 0xFF as char, 0x00 as char],
        [0x7F as char, 0x3F as char, 0x1F as char, 0x0F as char, 0x07 as char, 0x03 as char, 0x01 as char, 0x00 as char], [0x00 as char, 0x80 as char, 0xC0 as char, 0xE0 as char, 0xF0 as char, 0xF8 as char, 0xFC as char, 0xFE as char],
        [0xFF as char, 0xFF as char, 0xFF as char, 0xFF as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char], [0xF0 as char, 0xF0 as char, 0xF0 as char, 0xF0 as char, 0xF0 as char, 0xF0 as char, 0xF0 as char, 0xF0 as char],
        [0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0xFF as char, 0xFF as char, 0xFF as char, 0xFF as char], [0x0F as char, 0x0F as char, 0x0F as char, 0x0F as char, 0x0F as char, 0x0F as char, 0x0F as char, 0x0F as char],
        [0xFF as char, 0xFF as char, 0xFF as char, 0xFF as char, 0xFF as char, 0xFF as char, 0xFF as char, 0xFF as char], [0xFF as char, 0xFF as char, 0xFF as char, 0xFF as char, 0xFF as char, 0xFF as char, 0xFF as char, 0xFF as char], ];


    b.iter(|| {
        let n = test.len() / 8;
        let mut result = ['\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00'];
        for i in (0..n).step_by(2) {
            let result_new = transpose8vn(test[i].borrow_mut(), 1, 1, result.borrow_mut());
            assert_eq!(test1[i], result_new);
            let result_new = transpose8vn(test[i + 1].borrow_mut(), 1, 1, result.borrow_mut());
            assert_eq!(test1[i+1], result_new);
        }
    });
}

#[bench]
fn bench_transpose8b(b: &mut test::Bencher) {
    let mut test = [[0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char], [0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char],
        [0x80 as char, 0x40 as char, 0x20 as char, 0x10 as char, 0x08 as char, 0x04 as char, 0x02 as char, 0x01 as char], [0x80 as char, 0x40 as char, 0x20 as char, 0x10 as char, 0x08 as char, 0x04 as char, 0x02 as char, 0x01 as char],
        [0x00 as char, 0x00 as char, 0x00 as char, 0x01 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char], [0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x10 as char],
        [0x00 as char, 0x00 as char, 0x00 as char, 0x02 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char], [0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x10 as char, 0x00 as char],
        [0x00 as char, 0x00 as char, 0x00 as char, 0x04 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char], [0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x10 as char, 0x00 as char, 0x00 as char],
        [0x00 as char, 0x00 as char, 0x00 as char, 0x08 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char], [0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x10 as char, 0x00 as char, 0x00 as char, 0x00 as char],
        [0x55 as char, 0x55 as char, 0x55 as char, 0x55 as char, 0x55 as char, 0x55 as char, 0x55 as char, 0x55 as char], [0x00 as char, 0xFF as char, 0x00 as char, 0xFF as char, 0x00 as char, 0xFF as char, 0x00 as char, 0xFF as char],
        [0xAA as char, 0xAA as char, 0xAA as char, 0xAA as char, 0xAA as char, 0xAA as char, 0xAA as char, 0xAA as char], [0xFF as char, 0x00 as char, 0xFF as char, 0x00 as char, 0xFF as char, 0x00 as char, 0xFF as char, 0x00 as char],
        [0x7F as char, 0x3F as char, 0x1F as char, 0x0F as char, 0x07 as char, 0x03 as char, 0x01 as char, 0x00 as char], [0x00 as char, 0x80 as char, 0xC0 as char, 0xE0 as char, 0xF0 as char, 0xF8 as char, 0xFC as char, 0xFE as char],
        [0xFF as char, 0xFF as char, 0xFF as char, 0xFF as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char], [0xF0 as char, 0xF0 as char, 0xF0 as char, 0xF0 as char, 0xF0 as char, 0xF0 as char, 0xF0 as char, 0xF0 as char],
        [0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0xFF as char, 0xFF as char, 0xFF as char, 0xFF as char], [0x0F as char, 0x0F as char, 0x0F as char, 0x0F as char, 0x0F as char, 0x0F as char, 0x0F as char, 0x0F as char],
        [0xFF as char, 0xFF as char, 0xFF as char, 0xFF as char, 0xFF as char, 0xFF as char, 0xFF as char, 0xFF as char], [0xFF as char, 0xFF as char, 0xFF as char, 0xFF as char, 0xFF as char, 0xFF as char, 0xFF as char, 0xFF as char], ];
    let mut test1 = [[0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char], [0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char],
        [0x80 as char, 0x40 as char, 0x20 as char, 0x10 as char, 0x08 as char, 0x04 as char, 0x02 as char, 0x01 as char], [0x80 as char, 0x40 as char, 0x20 as char, 0x10 as char, 0x08 as char, 0x04 as char, 0x02 as char, 0x01 as char],
        [0x00 as char, 0x00 as char, 0x00 as char, 0x01 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char], [0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x10 as char],
        [0x00 as char, 0x00 as char, 0x00 as char, 0x02 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char], [0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x10 as char, 0x00 as char],
        [0x00 as char, 0x00 as char, 0x00 as char, 0x04 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char], [0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x10 as char, 0x00 as char, 0x00 as char],
        [0x00 as char, 0x00 as char, 0x00 as char, 0x08 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char], [0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x10 as char, 0x00 as char, 0x00 as char, 0x00 as char],
        [0x55 as char, 0x55 as char, 0x55 as char, 0x55 as char, 0x55 as char, 0x55 as char, 0x55 as char, 0x55 as char], [0x00 as char, 0xFF as char, 0x00 as char, 0xFF as char, 0x00 as char, 0xFF as char, 0x00 as char, 0xFF as char],
        [0xAA as char, 0xAA as char, 0xAA as char, 0xAA as char, 0xAA as char, 0xAA as char, 0xAA as char, 0xAA as char], [0xFF as char, 0x00 as char, 0xFF as char, 0x00 as char, 0xFF as char, 0x00 as char, 0xFF as char, 0x00 as char],
        [0x7F as char, 0x3F as char, 0x1F as char, 0x0F as char, 0x07 as char, 0x03 as char, 0x01 as char, 0x00 as char], [0x00 as char, 0x80 as char, 0xC0 as char, 0xE0 as char, 0xF0 as char, 0xF8 as char, 0xFC as char, 0xFE as char],
        [0xFF as char, 0xFF as char, 0xFF as char, 0xFF as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char], [0xF0 as char, 0xF0 as char, 0xF0 as char, 0xF0 as char, 0xF0 as char, 0xF0 as char, 0xF0 as char, 0xF0 as char],
        [0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0xFF as char, 0xFF as char, 0xFF as char, 0xFF as char], [0x0F as char, 0x0F as char, 0x0F as char, 0x0F as char, 0x0F as char, 0x0F as char, 0x0F as char, 0x0F as char],
        [0xFF as char, 0xFF as char, 0xFF as char, 0xFF as char, 0xFF as char, 0xFF as char, 0xFF as char, 0xFF as char], [0xFF as char, 0xFF as char, 0xFF as char, 0xFF as char, 0xFF as char, 0xFF as char, 0xFF as char, 0xFF as char], ];


    b.iter(|| {
        let n = test.len() / 8;
        let mut result = [0, 0, 0, 0, 0, 0, 0, 0];
        for i in (0..n).step_by(2) {
            let result_new = transpose8b64(test[i].borrow_mut(), 1, 1, result.borrow_mut());
            assert_eq!(test1[i][0] as i32, result_new[0]);
            let result_new = transpose8b64(test[i + 1].borrow_mut(), 1, 1, result.borrow_mut());
            assert_eq!(test1[i+1] [0] as i32, result_new[0]);
        }
    });
}

#[bench]
fn bench_transpose8bc(b: &mut test::Bencher) {
    let mut test = [[0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char], [0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char],
        [0x80 as char, 0x40 as char, 0x20 as char, 0x10 as char, 0x08 as char, 0x04 as char, 0x02 as char, 0x01 as char], [0x80 as char, 0x40 as char, 0x20 as char, 0x10 as char, 0x08 as char, 0x04 as char, 0x02 as char, 0x01 as char],
        [0x00 as char, 0x00 as char, 0x00 as char, 0x01 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char], [0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x10 as char],
        [0x00 as char, 0x00 as char, 0x00 as char, 0x02 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char], [0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x10 as char, 0x00 as char],
        [0x00 as char, 0x00 as char, 0x00 as char, 0x04 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char], [0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x10 as char, 0x00 as char, 0x00 as char],
        [0x00 as char, 0x00 as char, 0x00 as char, 0x08 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char], [0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x10 as char, 0x00 as char, 0x00 as char, 0x00 as char],
        [0x55 as char, 0x55 as char, 0x55 as char, 0x55 as char, 0x55 as char, 0x55 as char, 0x55 as char, 0x55 as char], [0x00 as char, 0xFF as char, 0x00 as char, 0xFF as char, 0x00 as char, 0xFF as char, 0x00 as char, 0xFF as char],
        [0xAA as char, 0xAA as char, 0xAA as char, 0xAA as char, 0xAA as char, 0xAA as char, 0xAA as char, 0xAA as char], [0xFF as char, 0x00 as char, 0xFF as char, 0x00 as char, 0xFF as char, 0x00 as char, 0xFF as char, 0x00 as char],
        [0x7F as char, 0x3F as char, 0x1F as char, 0x0F as char, 0x07 as char, 0x03 as char, 0x01 as char, 0x00 as char], [0x00 as char, 0x80 as char, 0xC0 as char, 0xE0 as char, 0xF0 as char, 0xF8 as char, 0xFC as char, 0xFE as char],
        [0xFF as char, 0xFF as char, 0xFF as char, 0xFF as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char], [0xF0 as char, 0xF0 as char, 0xF0 as char, 0xF0 as char, 0xF0 as char, 0xF0 as char, 0xF0 as char, 0xF0 as char],
        [0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0xFF as char, 0xFF as char, 0xFF as char, 0xFF as char], [0x0F as char, 0x0F as char, 0x0F as char, 0x0F as char, 0x0F as char, 0x0F as char, 0x0F as char, 0x0F as char],
        [0xFF as char, 0xFF as char, 0xFF as char, 0xFF as char, 0xFF as char, 0xFF as char, 0xFF as char, 0xFF as char], [0xFF as char, 0xFF as char, 0xFF as char, 0xFF as char, 0xFF as char, 0xFF as char, 0xFF as char, 0xFF as char], ];
    let mut test1 = [[0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char], [0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char],
        [0x80 as char, 0x40 as char, 0x20 as char, 0x10 as char, 0x08 as char, 0x04 as char, 0x02 as char, 0x01 as char], [0x80 as char, 0x40 as char, 0x20 as char, 0x10 as char, 0x08 as char, 0x04 as char, 0x02 as char, 0x01 as char],
        [0x00 as char, 0x00 as char, 0x00 as char, 0x01 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char], [0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x10 as char],
        [0x00 as char, 0x00 as char, 0x00 as char, 0x02 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char], [0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x10 as char, 0x00 as char],
        [0x00 as char, 0x00 as char, 0x00 as char, 0x04 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char], [0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x10 as char, 0x00 as char, 0x00 as char],
        [0x00 as char, 0x00 as char, 0x00 as char, 0x08 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char], [0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x10 as char, 0x00 as char, 0x00 as char, 0x00 as char],
        [0x55 as char, 0x55 as char, 0x55 as char, 0x55 as char, 0x55 as char, 0x55 as char, 0x55 as char, 0x55 as char], [0x00 as char, 0xFF as char, 0x00 as char, 0xFF as char, 0x00 as char, 0xFF as char, 0x00 as char, 0xFF as char],
        [0xAA as char, 0xAA as char, 0xAA as char, 0xAA as char, 0xAA as char, 0xAA as char, 0xAA as char, 0xAA as char], [0xFF as char, 0x00 as char, 0xFF as char, 0x00 as char, 0xFF as char, 0x00 as char, 0xFF as char, 0x00 as char],
        [0x7F as char, 0x3F as char, 0x1F as char, 0x0F as char, 0x07 as char, 0x03 as char, 0x01 as char, 0x00 as char], [0x00 as char, 0x80 as char, 0xC0 as char, 0xE0 as char, 0xF0 as char, 0xF8 as char, 0xFC as char, 0xFE as char],
        [0xFF as char, 0xFF as char, 0xFF as char, 0xFF as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char], [0xF0 as char, 0xF0 as char, 0xF0 as char, 0xF0 as char, 0xF0 as char, 0xF0 as char, 0xF0 as char, 0xF0 as char],
        [0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0xFF as char, 0xFF as char, 0xFF as char, 0xFF as char], [0x0F as char, 0x0F as char, 0x0F as char, 0x0F as char, 0x0F as char, 0x0F as char, 0x0F as char, 0x0F as char],
        [0xFF as char, 0xFF as char, 0xFF as char, 0xFF as char, 0xFF as char, 0xFF as char, 0xFF as char, 0xFF as char], [0xFF as char, 0xFF as char, 0xFF as char, 0xFF as char, 0xFF as char, 0xFF as char, 0xFF as char, 0xFF as char], ];


    b.iter(|| {
        let n = test.len() / 8;
        let mut result = ['\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00'];
        for i in (0..n).step_by(2) {
            let result_new = transpose8b64c(test[i].borrow_mut(), 1, 1, result.borrow_mut());
            assert_eq!(test1[i][0] , result_new[0]);
            let result_new = transpose8b64c(test[i + 1].borrow_mut(), 1, 1, result.borrow_mut());
            assert_eq!(test1[i+1] [0] , result_new[0]);
        }
    });
}

#[bench]
fn bench_transpose8bS(b: &mut test::Bencher) {
    let mut test = [[0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char], [0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char],
        [0x80 as char, 0x40 as char, 0x20 as char, 0x10 as char, 0x08 as char, 0x04 as char, 0x02 as char, 0x01 as char], [0x80 as char, 0x40 as char, 0x20 as char, 0x10 as char, 0x08 as char, 0x04 as char, 0x02 as char, 0x01 as char],
        [0x00 as char, 0x00 as char, 0x00 as char, 0x01 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char], [0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x10 as char],
        [0x00 as char, 0x00 as char, 0x00 as char, 0x02 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char], [0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x10 as char, 0x00 as char],
        [0x00 as char, 0x00 as char, 0x00 as char, 0x04 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char], [0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x10 as char, 0x00 as char, 0x00 as char],
        [0x00 as char, 0x00 as char, 0x00 as char, 0x08 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char], [0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x10 as char, 0x00 as char, 0x00 as char, 0x00 as char],
        [0x55 as char, 0x55 as char, 0x55 as char, 0x55 as char, 0x55 as char, 0x55 as char, 0x55 as char, 0x55 as char], [0x00 as char, 0xFF as char, 0x00 as char, 0xFF as char, 0x00 as char, 0xFF as char, 0x00 as char, 0xFF as char],
        [0xAA as char, 0xAA as char, 0xAA as char, 0xAA as char, 0xAA as char, 0xAA as char, 0xAA as char, 0xAA as char], [0xFF as char, 0x00 as char, 0xFF as char, 0x00 as char, 0xFF as char, 0x00 as char, 0xFF as char, 0x00 as char],
        [0x7F as char, 0x3F as char, 0x1F as char, 0x0F as char, 0x07 as char, 0x03 as char, 0x01 as char, 0x00 as char], [0x00 as char, 0x80 as char, 0xC0 as char, 0xE0 as char, 0xF0 as char, 0xF8 as char, 0xFC as char, 0xFE as char],
        [0xFF as char, 0xFF as char, 0xFF as char, 0xFF as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char], [0xF0 as char, 0xF0 as char, 0xF0 as char, 0xF0 as char, 0xF0 as char, 0xF0 as char, 0xF0 as char, 0xF0 as char],
        [0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0xFF as char, 0xFF as char, 0xFF as char, 0xFF as char], [0x0F as char, 0x0F as char, 0x0F as char, 0x0F as char, 0x0F as char, 0x0F as char, 0x0F as char, 0x0F as char],
        [0xFF as char, 0xFF as char, 0xFF as char, 0xFF as char, 0xFF as char, 0xFF as char, 0xFF as char, 0xFF as char], [0xFF as char, 0xFF as char, 0xFF as char, 0xFF as char, 0xFF as char, 0xFF as char, 0xFF as char, 0xFF as char], ];
    let mut test1 = [[0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char], [0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char],
        [0x80 as char, 0x40 as char, 0x20 as char, 0x10 as char, 0x08 as char, 0x04 as char, 0x02 as char, 0x01 as char], [0x80 as char, 0x40 as char, 0x20 as char, 0x10 as char, 0x08 as char, 0x04 as char, 0x02 as char, 0x01 as char],
        [0x00 as char, 0x00 as char, 0x00 as char, 0x01 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char], [0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x10 as char],
        [0x00 as char, 0x00 as char, 0x00 as char, 0x02 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char], [0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x10 as char, 0x00 as char],
        [0x00 as char, 0x00 as char, 0x00 as char, 0x04 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char], [0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x10 as char, 0x00 as char, 0x00 as char],
        [0x00 as char, 0x00 as char, 0x00 as char, 0x08 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char], [0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x10 as char, 0x00 as char, 0x00 as char, 0x00 as char],
        [0x55 as char, 0x55 as char, 0x55 as char, 0x55 as char, 0x55 as char, 0x55 as char, 0x55 as char, 0x55 as char], [0x00 as char, 0xFF as char, 0x00 as char, 0xFF as char, 0x00 as char, 0xFF as char, 0x00 as char, 0xFF as char],
        [0xAA as char, 0xAA as char, 0xAA as char, 0xAA as char, 0xAA as char, 0xAA as char, 0xAA as char, 0xAA as char], [0xFF as char, 0x00 as char, 0xFF as char, 0x00 as char, 0xFF as char, 0x00 as char, 0xFF as char, 0x00 as char],
        [0x7F as char, 0x3F as char, 0x1F as char, 0x0F as char, 0x07 as char, 0x03 as char, 0x01 as char, 0x00 as char], [0x00 as char, 0x80 as char, 0xC0 as char, 0xE0 as char, 0xF0 as char, 0xF8 as char, 0xFC as char, 0xFE as char],
        [0xFF as char, 0xFF as char, 0xFF as char, 0xFF as char, 0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char], [0xF0 as char, 0xF0 as char, 0xF0 as char, 0xF0 as char, 0xF0 as char, 0xF0 as char, 0xF0 as char, 0xF0 as char],
        [0x00 as char, 0x00 as char, 0x00 as char, 0x00 as char, 0xFF as char, 0xFF as char, 0xFF as char, 0xFF as char], [0x0F as char, 0x0F as char, 0x0F as char, 0x0F as char, 0x0F as char, 0x0F as char, 0x0F as char, 0x0F as char],
        [0xFF as char, 0xFF as char, 0xFF as char, 0xFF as char, 0xFF as char, 0xFF as char, 0xFF as char, 0xFF as char], [0xFF as char, 0xFF as char, 0xFF as char, 0xFF as char, 0xFF as char, 0xFF as char, 0xFF as char, 0xFF as char], ];


    b.iter(|| {
        let n = test.len() / 8;
        let mut result = ['\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00'];
        for i in (0..n).step_by(2) {
            let result_new = transpose8bS64(test[i].borrow_mut(), 1, 1, result.borrow_mut());
            assert_eq!(test1[i][0] , result_new[0]);
            let result_new = transpose8bS64(test[i + 1].borrow_mut(), 1, 1, result.borrow_mut());
            assert_eq!(test1[i+1] [0] , result_new[0]);
        }
    });
}



